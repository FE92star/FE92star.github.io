(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{193:function(t,s,a){"use strict";a.r(s);var i=a(0),n=Object(i.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"git基础操作总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git基础操作总结","aria-hidden":"true"}},[t._v("#")]),t._v(" git基础操作总结")]),t._v(" "),a("h2",{attrs:{id:"常规操作流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常规操作流程","aria-hidden":"true"}},[t._v("#")]),t._v(" 常规操作流程")]),t._v(" "),a("ol",[a("li",[t._v("git status => git add .(放入"),a("code",[t._v("缓存区")]),t._v(') => git status => git commit -m "提交描述"（提交到本地仓库，即'),a("code",[t._v("工作区")]),t._v("） => git status => git pull（拉取线上的代码到本地仓库） => git status(查看没有问题和冲突的情况下再提交代码) => git push（提交本地代码到线上）")]),t._v(" "),a("li",[t._v("git push -f orign 分支名——本地代码强制推到线上，保证本地代码是最新并且没有错误的情况下才可以操作，一般不建议这种操作")])]),t._v(" "),a("h2",{attrs:{id:"分支操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分支操作","aria-hidden":"true"}},[t._v("#")]),t._v(" 分支操作")]),t._v(" "),a("ul",[a("li",[t._v("查看分支\n"),a("ol",[a("li",[t._v("git branch -a（查看线上的分支）")]),t._v(" "),a("li",[t._v("git branch （查看本地分支）")])])]),t._v(" "),a("li",[t._v("分支新建\n"),a("ol",[a("li",[t._v('git checkout -b "分支名"——在你当前所在的分支下面新建分支，新建的分支是和所在的分支的代码是保持同步的；')]),t._v(" "),a("li",[t._v('本地分支提交到远程——git push origin "分支名"；')]),t._v(" "),a("li",[t._v('拉取远程分支并切换到该分支——git fetch origin "远程分支名":"本地分支名"；')])])]),t._v(" "),a("li",[t._v("分支合并\n"),a("ol",[a("li",[t._v('git merge "分支名"——表示以当前分支作为基础，把对应分支合并到当前分支；一般用于本地开发分支测试完成需要上线，合并到master分支上；')]),t._v(" "),a("li",[t._v("合并之前确保本地分支没有问题，再切换到master分支，开始合并，解决冲突，提交至远端；")])])]),t._v(" "),a("li",[t._v("分支删除\n"),a("ol",[a("li",[t._v('删除本地分支——git branch -D/d "本地分支名"；')]),t._v(" "),a("li",[t._v('删除远程分支——git push origin --delete "远程分支名"；')])])])]),t._v(" "),a("h2",{attrs:{id:"代码回滚"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码回滚","aria-hidden":"true"}},[t._v("#")]),t._v(" 代码回滚")]),t._v(" "),a("ul",[a("li",[t._v("git reset\n"),a("ol",[a("li",[t._v("git reset --merge commit-代表提交记录的编号——在被污染的工作区中回滚merge或者pull；")]),t._v(" "),a("li",[t._v("git reset --merge ORIG_HEAD——代码已经提交到工作区中，并且已经git pull远程代码，发现pull的代码有问题的时候，就可以使用这个指令回滚到pull之前，并且提交到工作区的代码不会被清除；")]),t._v(" "),a("li",[t._v("git reset --keep commit-提交编号——保留工作区并丢弃旧分支的一些提交")])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("  // 假如正在编辑一些文件，并且已经提交，接着继续工作，\n  // 然后发现当前工作内容应该属于另一个分支，与之前的提交无关，\n  // 此时，可以开启另一个新分支，并且保留工作区的内容；\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag start\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b branch1\n  edit\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit\n  edit\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b branch2\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --keep start\n  // 1.把branch1的改变提交了；\n  // 2.发现这个提交内容不属于branch1，此时新建分支branch2，并切换到branch2分支上；\n  // 3.此时就可以把branch1上的提交记录清除掉，并保持工作区内容不变，即以改动的内容还在。\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])])])]),t._v(" "),a("h2",{attrs:{id:"special操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#special操作","aria-hidden":"true"}},[t._v("#")]),t._v(" special操作")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("主要是关于解决bug的技巧（都需要git bash上面进行操作）")]),t._v(" "),a("ol",[a("li",[t._v("删除git🔒：rm -f .git/index.lock——git操作失败，可能就是由于git🔒的问题；")]),t._v(" "),a("li",[t._v("删除本地git仓库：rm .git -rf——本地仓库不删除，就无法新建git仓库；")]),t._v(" "),a("li",[t._v("删除git add .异常错误提示warning——git config --global core.autocrlf false。")])])]),t._v(" "),a("li",[a("p",[t._v("本地有多个git项目，用别名"),a("code",[t._v("alias")]),t._v("快捷切换git仓库")]),t._v(" "),a("ol",[a("li",[t._v("在C:\\Users\\Administrator目录下新建一个.bashrc可读文件，编辑这个文件（eg——alias licai='cd D:/\\work/\\wamp/\\www/\\51wealthy'，licai表示别名，后面是项目的绝对路径）。可以添加多个；")]),t._v(" "),a("li",[t._v("重启git，即可实现别名快捷切换。")])])]),t._v(" "),a("li",[a("p",[t._v("git添加到环境变量")]),t._v(" "),a("ol",[a("li",[t._v("找到系统的高级设置里面的环境变量设置；")]),t._v(" "),a("li",[t._v("向环境变量里面添加一个新的path:'git在本机中安装，bin目录所在的绝对路径'，即可全局引用git操作；")])])])]),t._v(" "),a("h2",{attrs:{id:"基本应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本应用","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本应用")]),t._v(" "),a("ul",[a("li",[t._v("本地代码上传至GitHub操作步骤："),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// github新建好仓库，在本地项目最所在位置进行操作；")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v(" git init"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//初始化git仓库")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v(" git add "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.")]),t._v(" git commit "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"init project"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.")]),t._v(" git remote add origin "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"GitHub远程仓库地址"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//连接远程仓库")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.")]),t._v(" git push "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("u"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("f origin master "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//强推")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])])])])])}],!1,null,null,null);s.default=n.exports}}]);