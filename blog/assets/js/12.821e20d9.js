(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{182:function(e,t,_){"use strict";_.r(t);var v=_(0),a=Object(v.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,_=e._self._c||t;return _("div",{staticClass:"content"},[_("h1",{attrs:{id:"js基础知识"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#js基础知识","aria-hidden":"true"}},[e._v("#")]),e._v(" JS基础知识")]),e._v(" "),_("h2",{attrs:{id:"q1：script标签的属性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#q1：script标签的属性","aria-hidden":"true"}},[e._v("#")]),e._v(" Q1：script标签的属性")]),e._v(" "),_("ul",[_("li",[e._v("script是用来引入JS代码的html标签，包含以下属性：\n"),_("ol",[_("li",[_("code",[e._v("type")]),e._v("：表示编写代码使用的脚本语言的内容类型，默认都是"),_("code",[e._v("text/javascript")]),e._v("；")]),e._v(" "),_("li",[_("code",[e._v("src")]),e._v("：用于表示引入外部脚本的链接地址；")]),e._v(" "),_("li",[_("code",[e._v("defer")]),e._v("和"),_("code",[e._v("async")]),e._v("：都是指引入的外部脚本会异步加载，防止阻塞html的解析，区别在于"),_("code",[e._v("defer")]),e._v("表示的是等待执行，即等整个页面加载结束之后再执行，虽然已经被异步加载；"),_("code",[e._v("async")]),e._v("则表示再不影响页面解析和其他脚本执行的情况下，立即下载该脚本代码；")])])])]),e._v(" "),_("h2",{attrs:{id:"q2：js的数据类型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#q2：js的数据类型","aria-hidden":"true"}},[e._v("#")]),e._v(" Q2：JS的数据类型")]),e._v(" "),_("ul",[_("li",[e._v("包含基本类型和引用类型")])]),e._v(" "),_("ol",[_("li",[e._v("基本类型："),_("code",[e._v("boolean")]),e._v(","),_("code",[e._v("string")]),e._v(","),_("code",[e._v("number")]),e._v(","),_("code",[e._v("null")]),e._v(","),_("code",[e._v("undefined")]),e._v(",引用类型："),_("code",[e._v("object")])]),e._v(" "),_("li",[e._v("区别在于：基本类型的变量赋值时完全赋值的，新的变量具有和赋值变量不同的内存空间，而引用类型在赋值的时候，是将对象的指针赋值给新变量，没有新开内存空间，因此指向的还是同一个堆内存中的对象，对新变量的操作会反应到赋值对象上面；")]),e._v(" "),_("li",[e._v("上面的现象的原因：基本类型的变量是存储在栈内存中，而引用类型的指针是存储在栈中，而指向的是存储在堆内存中的真正的对象；")])]),e._v(" "),_("h2",{attrs:{id:"q3：js的执行机理（延申到作用域，作用域链，执行上下文）"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#q3：js的执行机理（延申到作用域，作用域链，执行上下文）","aria-hidden":"true"}},[e._v("#")]),e._v(" Q3：JS的执行机理（延申到作用域，作用域链，执行上下文）")]),e._v(" "),_("ul",[_("li",[e._v("JS是"),_("code",[e._v("单线程语言")]),e._v("，代码的执行顺序是从上到下依次执行，代码的执行是发生在"),_("code",[e._v("执行环境栈")]),e._v("（Ectack）中，可以类比成一个"),_("code",[e._v("加工厂")]),e._v("，所有的JS代码都必须经过工厂的加工处理，原理如下：\n"),_("ol",[_("li",[e._v("JS代码进入执行栈加工厂中，首先初始化全局环境"),_("code",[e._v("window")]),e._v("，将全局环境压至栈底，并会生成一个全局变量对象，并在整个JS生命周期中一直存在，")]),e._v(" "),_("li",[e._v("执行函数A，A进入栈顶，并初始化A的执行上下文，执行上下文包含3个部分：变量对象（函数为活动对象），作用域链，this指向；变量对象包含：arguments对象，函数声明和变量声明；\n执行结束之后，A的执行上下文被弹出，进入下一个函数的执行环节；")]),e._v(" "),_("li",[e._v("上述过程总结：作用域是指对变量的引用的权限")])])])]),e._v(" "),_("h2",{attrs:{id:"q4：基于原型链的继承方式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#q4：基于原型链的继承方式","aria-hidden":"true"}},[e._v("#")]),e._v(" Q4：基于原型链的继承方式")])])}],!1,null,null,null);t.default=a.exports}}]);