(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{205:function(s,t,a){"use strict";a.r(t);var n=a(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"《第6章——面向对象的程序设计——6-3继承》"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#《第6章——面向对象的程序设计——6-3继承》","aria-hidden":"true"}},[s._v("#")]),s._v(" 《第6章——面向对象的程序设计——6.3继承》")]),s._v(" "),a("h2",{attrs:{id:"继承的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#继承的定义","aria-hidden":"true"}},[s._v("#")]),s._v(" 继承的定义")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("继承")]),s._v("是"),a("code",[s._v("oo")]),s._v("(面向对象)语言的原则之一（封装，继承，多态），在js中只有实现继承这一种继承方式，并且"),a("code",[s._v("原型链继承")]),s._v("是实现继承的主要方式之一")])]),s._v(" "),a("h3",{attrs:{id:"原型链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型链","aria-hidden":"true"}},[s._v("#")]),s._v(" 原型链")]),s._v(" "),a("ul",[a("li",[s._v("每一个函数都有一个"),a("code",[s._v("prototype")]),s._v("属性（原型对象），原型对象都包含一个指向构造函数的指针（"),a("code",[s._v("constructor")]),s._v("），每一个用构造函数"),a("code",[s._v("new")]),s._v("出来的实例对象都包含一个指向原型对象的内部指针，大概的形式是：")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("  obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("__proto__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype\n  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("constructor "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" Object\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"一-原型链实现继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-原型链实现继承","aria-hidden":"true"}},[s._v("#")]),s._v(" 一.原型链实现继承")]),s._v(" "),a("ul",[a("li",[s._v("把另外一个构造函数的实例对象赋值给当前函数的原型对象，当前函数的原型就包含指向另一个原型的指针，而另外一个原型又包含指向另外一个构造函数的指针，假如另外一个原型是另一个类型的实例，这种指向关系依然成立，层层递进：")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Sub")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 实现Sub继承了Super的方法和属性")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h4",{attrs:{id:"确定原型和实例的关系——instanceof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#确定原型和实例的关系——instanceof","aria-hidden":"true"}},[s._v("#")]),s._v(" 确定原型和实例的关系——instanceof")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("instanceof")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// obj是Object的实例对象，原型链上的实例对象都成立")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h4",{attrs:{id:"原型链继承的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型链继承的问题","aria-hidden":"true"}},[s._v("#")]),s._v(" 原型链继承的问题")]),s._v(" "),a("ul",[a("li",[s._v("原型链虽然方便，但是也存在两个主要的问题：")])]),s._v(" "),a("ol",[a("li",[s._v("定义在原型对象中的属性如果是引用类型，就会被所有的实例共享，因此在新原型上修改引用类型的属性值会直接反应在原来的原型对象上面；")]),s._v(" "),a("li",[s._v("创建子类型的实例时，不能向超类型的构造函数中传递参数；")])]),s._v(" "),a("h3",{attrs:{id:"二-构造函数实现继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-构造函数实现继承","aria-hidden":"true"}},[s._v("#")]),s._v(" 二.构造函数实现继承")]),s._v(" "),a("ul",[a("li",[s._v("运用原生方法"),a("code",[s._v("call")]),s._v("和"),a("code",[s._v("apply")]),s._v("实现继承，主要原理：")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" name\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Sub")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Bob'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将Super的this指向变到Sub上面，即Sub继承了Super")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Sub")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Bob'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h4",{attrs:{id:"构造函数实现的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造函数实现的问题","aria-hidden":"true"}},[s._v("#")]),s._v(" 构造函数实现的问题")]),s._v(" "),a("ul",[a("li",[s._v("所有的方法也必须要在构造函数里面定义，无法实现复用。")])]),s._v(" "),a("h3",{attrs:{id:"三-组合继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三-组合继承","aria-hidden":"true"}},[s._v("#")]),s._v(" 三.组合继承")]),s._v(" "),a("ul",[a("li",[s._v("即原型链技术和构造函数技术组合到一起实现继承，构造函数定义属性，原型定义方法，是常用的基本上没什么缺陷的继承方式。")])])])}],!1,null,null,null);t.default=e.exports}}]);